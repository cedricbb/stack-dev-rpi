version: "3.3"
services:
    mariadb:
        container_name: mariadb
        restart: always
        image: arm64v8/mariadb:10.3
        environment:
            - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD}
            - MYSQL_DATABASE=${DATABASE_NAME}
        volumes:
            - mariadb:/var/lib/mysql
            - ./dumps:/dumps
        ports:
            - ${DATABASE_EXTERNAL_PORT}:3306
        labels:
            - "traefik.enable=false"
        networks:
            - backend

    postgres:
        container_name: postgres
        restart: always
        image: arm64v8/postgres:16.3-alpine
        environment:
            - POSTGRES_PASSWORD=${POSTGRES_DATABASE_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DATABASE_NAME}
        volumes:
            - postgres:/var/lib/postgresql/data
            - ./dumps:/dumps
        ports:
            - ${POSTGRES_DATABASE_EXTERNAL_PORT}:5432
        labels:
            - "traefik.enable=false"
        networks:
            - backend

    redis:
        image: arm64v8/redis:5-alpine
        container_name: redis
        labels:
            - "traefik.enable=false"
        restart: always
        ports:
            - 6379:6379
        networks:
            - backend

    traefik:
        container_name: "traefik"
        image: "arm64v8/traefik:1.7.20"
        restart: "always"
        command: --api --docker=true
        ports:
            - "80:80"
            - "8080:8080"
            - "443:443"
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
            - ./traefik:/etc/traefik
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=traefik"
            - "traefik.port=8080"
            - "traefik.backend=traefik"
            - "traefik.frontend.rule=Host:traefik.local"
        networks:
            - "backend"

    mailhog:
        image: "mailhog/mailhog:latest"
        container_name: "mailhog"
        restart: "always"
        networks:
            - "backend"
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:mailhog.local"
            - "traefik.backend=mailhog"
            - "traefik.port=8025"
    
    phpmyadmin:
        image: arm64v8/phpmyadmin:latest
        restart: always
        volumes:
          - ./phpmyadmin.ini:/usr/local/etc/php/conf.d/phpmyadmin.ini
        networks:
          - backend
        environment:
          PMA_ARBITRARY: 1
          PMA_HOST: mariadb
          PMA_USER: root
          PMA_PASSWORD: root
          PMA_ABSOLUTE_URI: https://phpmyadmin.local
          UPLOAD_LIMIT: 512MB
        labels:
          - traefik.frontend.rule=Host:phpmyadmin.local
          - traefik.docker.network=backend
          - traefik.port=80

    pgadmin:
        image: dpage/pgadmin4:latest
        environment:
          PGADMIN_DEFAULT_EMAIL: admin@localhost
          PGADMIN_DEFAULT_PASSWORD: admin
        ports:
            -"5050:80"
        networks:
            - backend
        labels:
            - "traefik.frontend.rule=Host:pgadmin.localhost"
            - "traefik.port=80"

    apache-php:
        image: arm64v8/php:${PHP_VERSION}-apache
        volumes:
            - ${PROJECT_ROOT}/php:/var/www/html
            - ./php.ini:/usr/local/etc/php/conf.d/custom.ini
        ports:
            - "${APACHE_PORT}:80"
        networks:
            - backend
        environment:
            - PHP_MEMORY_LIMIT=${PHP_MEMORY_LIMIT}
            - PHP_MAX_EXECUTION_TIME=${PHP_MAX_EXECUTION_TIME}
        labels:
            - "traefik.frontend.rule=Host:php.localhost"
            - "traefik.port=80"

    nodejs:
        image: arm64v8/node:${NODE_VERSION}
        working_dir: /app
        volumes:
            - "${NODE_PORT}:3000"
        networks:
            - backend
        command: tail -f /dev/null
        labels:
            - "traefik.frontend.rule=Host:node.localhost"
            - "traefik.port=3000"

    code-server:
        image: arm64v8/code-server:latest
        container_name: vscode-server
        environment:
            - PASSWORD=${CODE_SERVER_PASSWORD}
        volumes:
            - ${PROJECT_ROOT}:/home/coder/project
            - ~/.ssh:/home/coder/.ssh:ro
            - vscode-extensions:/home/coder/.local/share/code-server/extensions
        ports:
            - "8080:8080"
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:vscode.localhost"
            - "traefik.port=8080"
        restart: unless-stopped

    syncthing:
        image: syncthing/syncthing
        container_name: syncthing
        volumes:
            - ${PROJECT_ROOT}:/var/syncthing
        ports:
            - "8384:8384"
            - "22000:22000"
            - "21027:21027/udp"
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:syncthing.localhost"
            - "traefik.port=8384"
    
    portainer:
        image: portainer/portainer-ce:linux-arm64
        container_name: portainer
        restart: always
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - portainer_data:/data
        ports:
            - "9000:9000"
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:portainer.localhost"

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        restart: always
        volumes:
            - grafana_data:/var/lib/grafana
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:grafana.localhost"

    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
        networks:
            - backend

    adminer:
        image: adminer:latest
        container_name: adminer
        restart: always
        ports:
            - "8082:8080"
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:adminer.localhost"

    filebrowser:
        image: filebrowser/filebrowser:latest
        container_name: filebrowser
        restart: always
        volumes:
            - ${PROJECT_ROOT}:/srv
            - ./filebrowser.db:/database.db
        environment:
            - FB_BASEURL=""
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:filebrowser.localhost"

    gitlab:
        image: gitlab/gitlab-ce:latest
        container_name: gitlab
        restart: always
        hostname: gitlab.localhost
        environment:
            GITLAB_OMNIBUS_CONFIG: |
                external_url 'http://gitlab.localhost'
                gitlab_rails['gitlab_shell_ssh_port'] = 2224
                gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
        ports:
            - "2224:22"
        volumes:
            - gitlab/config:/etc/gitlab
            - gitlab/logs:/var/log/gitlab
            - gitlab/data:/var/opt/gitlab
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:gitlab.localhost"

    gitlab-runner:
        image: gitlab/gitlab-runner:latest
        container_name: gitlab-runner
        restart: always
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./gitlab-runner/config:/etc/gitlab-runner
        networks:
            - backend

    mkdocs:
        image: squidfunk/mkdocs-material
        container_name: docs
        volumes:
            - ./docs:/docs
        ports:
            - "8000:8000"
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:mkdoc.localhost"

    backup:
        image: offen/docker-volume-backup:latest
        container_name: backup
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - mariadb:/backup/mariadb:ro
            - postgres:/backup/postgres:ro
            - gitlab_data:/backup/gitlab:ro
            - ./backups:/backups
        environment:
            - BACKUP_CRON_EXPRESSION: "${BACKUP_SCHEDULE:-0 4 * * *}"
            - BACKUP_FILENAME: "backup-%Y%m%d"
            - BACKUP_RETENTION_DAYS: "${BACKUP_RETENTION_DAYS:-7}"

    react-dev:
        image: node:20-alpine
        container_name: react-dev
        working_dir: /app
        volumes:
            - ./projects/react:/app
        ports:
            - "{REACT_PORT:-3000}:3000"
        environment:
            - NODE_ENV=development
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:react.localhost"
            - "traefik.port=3000"

    next-dev:
        image: node:20-alpine
        container_name: next-dev
        working_dir: /app
        volumes:
            - ./projects/next:/app
        ports:
            - "{NEXT_PORT:-3001}:3000"
        environment:
            - NODE_ENV=development
        command: sh -c "npm install && npm run dev"
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:next.localhost"
            - "traefik.port=3000"

    nuxt-dev:
        image: node:20-alpine
        container_name: nuxt-dev
        working_dir: /app
        volumes:
            - ./projects/nuxt:/app
        ports:
            - "{NUXT_PORT:-3002}:3000"
        environment:
            - NODE_ENV=development
        command: sh -c "npm install && npm run dev"
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:nuxt.localhost"
            - "traefik.port=3000"

    angular-dev:
        image: node:20-alpine
        container_name: angular-dev
        working_dir: /app
        volumes:
            - ./projects/angular:/app
        ports:
            - "{ANGULAR_PORT:-4200}:4200"
        environment:
            - NODE_ENV=development
        command: sh -c "npm install && ng serve --host 0.0.0.0"
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:angular.localhost"
            - "traefik.port=4200"

    flutter-dev:
        image: cirrusci/flutter:stable
        container_name: flutter-dev
        working_dir: /app
        volumes:
            - ./projects/flutter:/app
        ports:
            - "{FLUTTER_PORT:-8090}:8090"
        command: sh -c "flutter pub get && flutter run -d web-server --web-port 8090 --web-hostname 0.0.0.0"
        networks:
            - backend
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:flutter.localhost"
            - "traefik.port=8090"

networks:
    backend:
        external: true

volumes:
    mariadb:
        driver: local
    postgres:
        driver: local
    vscode-extensions:
        driver: local
    portainer_data:
    grafana_data:
    prometheus_data:
    gitlab_data:
    gitlab_config:
    gitlab_logs:
    gitlab_runner_config:
